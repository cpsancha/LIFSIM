function [propellerData] = importPropellerData(filename, startRow, endRow)

%IMPORTFILE Import numeric data from a text file as column vectors.
%   [V2,J,PE,CT,CP,PWR,TORQU,ETHRUS,T] = IMPORTFILE(FILENAME) Reads data
%   from text file FILENAME for the default selection.
%
%   [V2,J,PE,CT,CP,PWR,TORQU,ETHRUS,T] = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   [V2,J,Pe,Ct,Cp,PWR,Torqu,eThrus,t] = importfile('PER3_17x8E.txt',17, 494);
%
%    See also TEXTSCAN.
%
% Auto-generated by MATLAB on 2017/02/22 16:27:54

%% Initialize variables.
if nargin<=2
    startRow = 17;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%12s%12s%12s%12s%12s%12s%12s%12s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{9} = strtrim(dataArray{9});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8]);
rawCellColumns = raw(:, 9);


%% Exclude rows with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),2); % Find rows with non-numeric cells
rawNumericColumns(I,:) = [];
rawCellColumns(I,:) = [];

%% Allocate imported array to column variable names
V2 = cell2mat(rawNumericColumns(:, 1));
J = cell2mat(rawNumericColumns(:, 2));
Pe = cell2mat(rawNumericColumns(:, 3));
Ct = cell2mat(rawNumericColumns(:, 4));
Cp = cell2mat(rawNumericColumns(:, 5));
PWR = cell2mat(rawNumericColumns(:, 6));
Torqu = cell2mat(rawNumericColumns(:, 7));
eThrus = cell2mat(rawNumericColumns(:, 8));
t = rawCellColumns(:, 1);


%% FORMAT OUTPUT

%Model
model = strrep(filename,'.txt','');
model = strrep(model,'PER3_','');
propellerData.Model = model;

%Diameter
index = strfind(model,'x');
Diameter = convlength(str2double(model(1:index-1)),'in','m');
propellerData.Diameter=Diameter;

%Conversion Factors
Hp2Watts = 745.7;
Mph2Ms   = 0.44704;
nlength  = length(V2)/30;
maxV     = Mph2Ms*max(V2);

%% Reshaping of data to be formatted

   propellerDataTemp.PWR=Hp2Watts.*reshape(PWR,[30,nlength]);
%     propellerData.PWR=745.7*propellerData.PWR;
  
   propellerDataTemp.eta=reshape(Pe,[30,nlength]);    
   propellerDataTemp.Cp=reshape(Cp,[30,nlength]); 
   propellerDataTemp.V=Mph2Ms.*reshape(V2,[30,nlength]);
%    maxV     = max(propellerDataTemp.V);
%     propeller.V=0.44704.*propeller.V; %to m/s

%     propeller.RPM=rpmmat;
%     
%% Create vector interpolation for each RPM

    for i=1:nlength
%         
        rpmvec(i,:)=linspace(1000*i,1000*i,30); 
        
        x=propellerDataTemp.V(:,i);
        xq=linspace(0,maxV,1000);
        v=propellerDataTemp.eta(:,i);
        propellerData.eta(i,:)=interp1(x,v,xq,'pchip',0);
        figure(1)
            plot(xq,propellerData.eta(i,:)); hold on
%         
        v=propellerDataTemp.PWR(:,i);
        propellerData.PWR(i,:)=interp1(x,v,xq,'pchip',0);
%         figure(2)
%             plot(xq,propellerData.PWR(i,:)); hold on
        v=propellerDataTemp.Cp(:,i);
        propellerData.Cp(i,:)=interp1(x,v,xq,'pchip',0);
%         figure(3)
%             plot(xq,propellerData.Cp(i,:)); hold on
    end
%     
%     
%     LD.propeller1.eta = Vq;
     propellerData.RPM = rpmvec(:,1);
     propellerData.V   = xq;
     

     
     
     
%     LD.propeller1.PWR = VqPWR;
    
%     

